
// リテラルを利用した配列の生成
const arr = [];

// Array オブジェクトのインスタンスを生成
const Arr = new Array();

// リテラルを利用したオブジェクトの生成
const obj = {};

// Object オブジェクトのインスタンスを生成
const Obj = new Object();

// ----------------------------------------------------------------------------

// 配列は初期化時の指定でいろいろ変わるので注意
let ARR;

ARR = [1, 2, 3];          // → [1, 2, 3]
ARR = new Array(1, 2, 3); // → [1, 2, 3]
ARR = [3];                // → [3]
ARR = new Array(3);       // → [undefined, undefined, undefined]

// 配列の要素へのアクセスはカギ括弧に整数を指定する
ARR = ['abc', 'def', 'ghi'];
console.log(ARR[1]); // → def

// 配列の中に、さらに配列を入れることもできる
ARR = [[0, 1, 2], [3, 4, 5]];
console.log(ARR[1][2]); // → 5

// ----------------------------------------------------------------------------

// オブジェクトの要素にはキー名を使ってアクセスでき……
// ドット記法とブラケット記法のいずれかを利用できる
let OBJ = {
    foo: 'FOO',
    bar: 'BAR',
    baz: 'BAZ'
};

// ドット記法
console.log(OBJ.foo); // → FOO
// ブラケット記法
console.log(OBJ['bar']); // → BAR

// ----------------------------------------------------------------------------

// 配列やオブジェクトを定義するとき、最後のカンマは自動的に無視される
ARR = [
    'foo',
    'bar',
    'baz', // ← 次の要素は存在しないけどエラーにはならない
];

